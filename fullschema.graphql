"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input CreateTopicConfigInput {
  retentionDays: Int
  partitionCount: Int
  minInSyncReplicas: Int
}

input CreateTopicInput {
  name: String
  config: CreateTopicConfigInput
}

scalar GraphbackObjectID

input GraphbackObjectIDInput {
  ne: GraphbackObjectID
  eq: GraphbackObjectID
  le: GraphbackObjectID
  lt: GraphbackObjectID
  ge: GraphbackObjectID
  gt: GraphbackObjectID
  in: [GraphbackObjectID!]
  between: [GraphbackObjectID!]
}

input MutateTopicConfigInput {
  retentionDays: Int
  partitionCount: Int
  minInSyncReplicas: Int
}

input MutateTopicInput {
  _id: GraphbackObjectID!
  name: String
  config: MutateTopicConfigInput
}

type Mutation {
  createTopic(input: CreateTopicInput!): Topic
  updateTopic(input: MutateTopicInput!): Topic
  deleteTopic(input: MutateTopicInput!): Topic
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Partitions {
  partition: Int
  replicas: [Replicas]
}

type Query {
  getTopic(id: GraphbackObjectID!): Topic
  findTopics(filter: TopicFilter, page: PageRequest, orderBy: OrderByInput): TopicResultList!
}

type Replicas {
  in_sync: Boolean
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newTopic(filter: TopicSubscriptionFilter): Topic!
  updatedTopic(filter: TopicSubscriptionFilter): Topic!
  deletedTopic(filter: TopicSubscriptionFilter): Topic!
}

""" @model """
type Topic {
  _id: GraphbackObjectID!
  name: String

  """@transient"""
  partitions: [Partitions]
  config: TopicConfig
}

type TopicConfig {
  retentionDays: Int
  partitionCount: Int
  minInSyncReplicas: Int
}

input TopicFilter {
  _id: GraphbackObjectIDInput
  name: StringInput
  and: [TopicFilter!]
  or: [TopicFilter!]
  not: TopicFilter
}

type TopicResultList {
  items: [Topic]!
  offset: Int
  limit: Int
  count: Int
}

input TopicSubscriptionFilter {
  and: [TopicSubscriptionFilter!]
  or: [TopicSubscriptionFilter!]
  not: TopicSubscriptionFilter
  _id: GraphbackObjectIDInput
  name: StringInput
}
